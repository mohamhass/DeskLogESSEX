package GUI;

import Screenshot.ScreenshotMain;
import VideoCreator.*;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;
import java.util.Timer;
import java.util.TimerTask;


public class BottomPanel extends JPanel implements ActionListener {

    private static int frameRateInMilliseconds = 5000;
    private JButton recordButt;



    private BufferedImage buttonImage;


    GridBagConstraints gbcBottom = new GridBagConstraints();

    private JFileChooser chooserLocation;
    private String fileChooserTitle = "Select location for video log export";
    private static String videoLogLocation = "";


    private boolean currentlyRecording = false;


    public BottomPanel() {
        gridlayout();



        try {
            buttonImage = ImageIO.read(new File("./src/GUI/images/icon.png"));
            File file_image = new File(".\\src\\GUI\\images\\icon.png");
            //buttonImage = ImageIO.read(new File(".\\src\\GUI\\images"));
            buttonImage = ImageIO.read(file_image);
        } catch (IOException e) {
            e.printStackTrace();
        }

        recordButt = new JButton(new ImageIcon(buttonImage));
        recordButt.setBorderPainted(false);
        recordButt.setFocusPainted(false);
        recordButt.addActionListener(this);
        recordButt.setActionCommand("record");

        gbcBottom.gridx = 0;
        gbcBottom.gridy = 1;
        style();
        add(recordButt, gbcBottom);
    }

    static void setFrameRateInMilliseconds(int newFrameRate){
        frameRateInMilliseconds = newFrameRate;
    }

    public void actionPerformed(ActionEvent e) {
        if(e.getActionCommand().equals("record")){

            //Code to handle hitting record button

            if(!currentlyRecording){
                startRecording();
            }else{
                endRecording();
            }

        }
    }

    public void userSetLocation() {
        chooserLocation = new JFileChooser();
        chooserLocation.setCurrentDirectory(new java.io.File("."));
        chooserLocation.setDialogTitle(fileChooserTitle);
        chooserLocation.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooserLocation.setAcceptAllFileFilterUsed(false);

        if (chooserLocation.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            videoLogLocation = chooserLocation.getSelectedFile().toString();
            System.out.println("Selected Location: " + videoLogLocation);
        }
        else {
            System.out.println("Location not selected");
        }
    }

    private void startRecording(){
        userSetLocation();
        recordScreenshots.resume(); //Constructs new screenshot timer
        currentlyRecording = true;
        getRootPane().setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.RED));  //Temp indicator that recording
    }

    private void endRecording(){
        getRootPane().setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, Color.RED)); //Stop recording indicator
        currentlyRecording = false;
        recordScreenshots.pause(); //Terminate and purge screenshot timer
        exportToVideoCheck();
    }

    private void exportToVideoCheck(){
        int exportNowDialog = JOptionPane.showConfirmDialog(null,
                "Do you want to export your recording to video now?",
                "Export to video now?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE
        );

        if(exportNowDialog == JOptionPane.YES_OPTION){
            boolean complete = false;
            try{

                SimpleDateFormat dateFormatter = new SimpleDateFormat(" - yyyy.MM.dd'_'HH.mm.ss");
                Date currentDate = new Date();
                String videoFilename = videoLogLocation + "/outputVideo" + dateFormatter.format(currentDate) + ".mp4";
                String pathImages = videoLogLocation + "/SavedScreenshots/";
                VideoCreator videoCreator = new VideoCreator(videoFilename, pathImages, "jpg");
                videoCreator.generateVideoBySequenceImages();

                File screenshotDirectory = new File(pathImages);
                purgeDirectory(screenshotDirectory);
                complete = true;

            } catch (Exception e1) {
                e1.printStackTrace();
                System.out.println("Failed to render and export video.");
            }finally
            {
                String message;
                if (complete) {
                    message = "Video Export Complete!";
                }
                else
                    {
                        message = "Failed to render and export video!";
                    }
                JOptionPane.showMessageDialog(null, message, "Video Export", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }


    static class recordScreenshots extends TimerTask{
        static Timer timer;

        public void run(){
            // run() details all events of each task cycle
            try{
                ScreenshotMain.screenshotHandler(videoLogLocation);
            }catch (Exception e){
                int missedFrames = 0;
                System.out.println(e);
                System.out.println("Error taking and saving screenshot - " + ++missedFrames + " missed frames so far.");
            }
        }

        static void pause(){
            timer.cancel();
            timer.purge();
        }

        static void resume(){
            timer = new Timer();
            timer.scheduleAtFixedRate(new recordScreenshots(), 0, frameRateInMilliseconds);
        }
    }



    private void gridlayout(){
        setLayout(new GridBagLayout());
    }

    private void style(){
        Font butFont = new Font("Century Gothic", Font.PLAIN,11) ;
        setBackground(new Color(255,255,255));
        recordButt.setFont(butFont);
    }

    private void purgeDirectory(File dir) {
        for (File file: Objects.requireNonNull(dir.listFiles())) {
            if (file.isDirectory())
                purgeDirectory(file);
            file.delete();
        }
    }
}